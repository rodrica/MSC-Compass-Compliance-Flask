---
test_name: Role API CRUD Happy
marks:
  - usefixtures:
      - flush_local_dynamodb
stages:
  - name: Get JWT
    request:
      url: http://jwt:5000/login
      method: POST
      headers:
        content-type: application/json
      json:
        sub: test@test.com
        tenant_id: tenant1
        roles:
          - tenant1
          - tenant1:admin
        claims:
          - allow:tenant1:user-management:*:roles:*
    response:
      status_code: 200
      save:
        body:
          access_token: access_token

  - name: Get all Roles
    request:
      url: http://app:5000/roles
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      body:
        items: []
        num_items: 0
        total_items: 0

  - name: Create Role
    request:
      url: http://app:5000/roles
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
      json:
        name: Finance
    response:
      status_code: 201
      body:
        $ext:
          function: techlock.common.unittest.tavern_validators:validate_base_model
          extra_kwargs:
            expected:
              name: Finance
              description: null
              claims_by_audience: null
              tenant_id: tenant1
              created_by: test@test.com
              changed_by: test@test.com
              tags: null
      save:
        body:
          created_id: entity_id

  - name: Get Role
    request:
      url: http://app:5000/roles/{created_id}
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      body:
        $ext:
          function: techlock.common.unittest.tavern_validators:validate_base_model
          extra_kwargs:
            expected:
              entity_id: "{created_id}"
              name: Finance
              description: null
              claims_by_audience: null
              tenant_id: tenant1
              created_by: test@test.com
              changed_by: test@test.com
              tags: null

  - name: Update Role
    request:
      url: http://app:5000/roles/{created_id}
      method: PUT
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
      json:
        name: HR
    response:
      status_code: 200
      body:
        $ext:
          function: techlock.common.unittest.tavern_validators:validate_base_model
          extra_kwargs:
            expected:
              entity_id: "{created_id}"
              name: HR
              description: null
              claims_by_audience: null
              tenant_id: tenant1
              created_by: test@test.com
              changed_by: test@test.com
              tags: null

  - name: Delete Role
    request:
      url: http://app:5000/roles/{created_id}
      method: DELETE
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
    response:
      status_code: 204

  - name: Get all Roles - confirm deletion
    request:
      url: http://app:5000/roles
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      body:
        items: []
        num_items: 0
        total_items: 0

---
test_name: Roles API GET Happy
marks:
  - usefixtures:
      - flush_local_dynamodb
stages:
  - name: Get JWT
    request:
      url: http://jwt:5000/login
      method: POST
      headers:
        content-type: application/json
      json:
        sub: test@test.com
        tenant_id: tenant1
        roles:
          - tenant1
          - tenant1:admin
        claims:
          - allow:tenant1:user-management:*:roles:*
    response:
      status_code: 200
      save:
        body:
          access_token: access_token

  - name: Get JWT2
    request:
      url: http://jwt:5000/login
      method: POST
      headers:
        content-type: application/json
      json:
        sub: test2@test.com
        tenant_id: tenant2
        roles:
          - tenant2
          - tenant2:admin
        claims:
          - allow:tenant2:user-management:*:roles:*
    response:
      status_code: 200
      save:
        body:
          access_token2: access_token

  - name: Get all Roles - tenant1
    request:
      url: http://app:5000/roles
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      body:
        items: []
        num_items: 0
        total_items: 0

  - name: Get all Roles - tenant2
    request:
      url: http://app:5000/roles
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      body:
        items: []
        num_items: 0
        total_items: 0

  - name: Create Role1 - tenant1
    request:
      url: http://app:5000/roles
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
      json:
        name: Alpha
    response:
      status_code: 201
      save:
        body:
          role1: entity_id

  - name: Create Role2 - tenant1
    request:
      url: http://app:5000/roles
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
      json:
        name: Beta
    response:
      status_code: 201
      save:
        body:
          role2: entity_id

  - name: Create Role3 - tenant2
    request:
      url: http://app:5000/roles
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token2}"
      json:
        name: Zeta
    response:
      status_code: 201
      save:
        body:
          role3: entity_id

  - name: Get all Roles - tenant1 - no filters
    request:
      url: http://app:5000/roles
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      body:
        $ext:
          function: techlock.common.unittest.tavern_validators:validate_base_model
          extra_kwargs:
            expected:
              items:
                - entity_id: "{role1}"
                  name: Alpha
                  description: null
                  claims_by_audience: null
                  tenant_id: tenant1
                  created_by: test@test.com
                  changed_by: test@test.com
                  tags: null
                - entity_id: "{role2}"
                  name: Beta
                  description: null
                  claims_by_audience: null
                  tenant_id: tenant1
                  created_by: test@test.com
                  changed_by: test@test.com
                  tags: null
              num_items: 2
              total_items: 2

  - name: Get all Roles - tenant2 - no filters
    request:
      url: http://app:5000/roles
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token2}"
    response:
      status_code: 200
      body:
        $ext:
          function: techlock.common.unittest.tavern_validators:validate_base_model
          extra_kwargs:
            expected:
              items:
                - entity_id: "{role3}"
                  name: Zeta
                  description: null
                  claims_by_audience: null
                  tenant_id: tenant2
                  created_by: test2@test.com
                  changed_by: test2@test.com
                  tags: null
              num_items: 1
              total_items: 1

  - name: Get all Roles - tenant1 - filter by name case insensitive endswith wildcard
    request:
      url: http://app:5000/roles
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
      params:
        name: alp*
    response:
      status_code: 200
      body:
        $ext:
          function: techlock.common.unittest.tavern_validators:validate_base_model
          extra_kwargs:
            expected:
              items:
                - entity_id: "{role1}"
                  name: Alpha
                  description: null
                  claims_by_audience: null
                  tenant_id: tenant1
                  created_by: test@test.com
                  changed_by: test@test.com
                  tags: null
              num_items: 1
              total_items: 1

  - name: Get all Roles - tenant1 - filter by created_by order by name desc
    request:
      url: http://app:5000/roles
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
      params:
        created_by: test@test.com
        sort: name:desc
    response:
      status_code: 200
      body:
        $ext:
          function: techlock.common.unittest.tavern_validators:validate_base_model
          extra_kwargs:
            expected:
              items:
                - entity_id: "{role2}"
                  name: Beta
                  description: null
                  claims_by_audience: null
                  tenant_id: tenant1
                  created_by: test@test.com
                  changed_by: test@test.com
                  tags: null
                - entity_id: "{role1}"
                  name: Alpha
                  description: null
                  claims_by_audience: null
                  tenant_id: tenant1
                  created_by: test@test.com
                  changed_by: test@test.com
                  tags: null
              num_items: 2
              total_items: 2

  - name: Get Role1 - tenant1
    request:
      url: http://app:5000/roles/{role1}
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      body:
        $ext:
          function: techlock.common.unittest.tavern_validators:validate_base_model
          extra_kwargs:
            expected:
              entity_id: "{role1}"
              name: Alpha
              description: null
              claims_by_audience: null
              tenant_id: tenant1
              created_by: test@test.com
              changed_by: test@test.com
              tags: null

  - name: Get Role3 - tenant1
    request:
      url: http://app:5000/roles/{role3}
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
    response:
      status_code: 404

  - name: Get Role1 - tenant2
    request:
      url: http://app:5000/roles/{role1}
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token2}"
    response:
      status_code: 404

  - name: Get Role3 - tenant2
    request:
      url: http://app:5000/roles/{role3}
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token2}"
    response:
      status_code: 200
      body:
        $ext:
          function: techlock.common.unittest.tavern_validators:validate_base_model
          extra_kwargs:
            expected:
              entity_id: "{role3}"
              name: Zeta
              description: null
              claims_by_audience: null
              tenant_id: tenant2
              created_by: test2@test.com
              changed_by: test2@test.com
              tags: null

---
test_name: Roles API create and update validation
marks:
  - usefixtures:
      - flush_local_dynamodb
stages:
  - name: Get JWT
    request:
      url: http://jwt:5000/login
      method: POST
      headers:
        content-type: application/json
      json:
        sub: test@test.com
        tenant_id: tenant1
        roles:
          - tenant1
          - tenant1:admin
        claims:
          - allow:tenant1:user-management:*:roles:*
    response:
      status_code: 200
      save:
        body:
          access_token: access_token

  - name: Get all Roles
    request:
      url: http://app:5000/roles
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      body:
        items: []
        num_items: 0
        total_items: 0

  - name: Create Role
    request:
      url: http://app:5000/roles
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
      json:
        name: Test
        family_name: e2e
        email: test2@test.com
        temporary_password: changeme
    response:
      status_code: 201
      body:
        $ext:
          function: techlock.common.unittest.tavern_validators:validate_base_model
          extra_kwargs:
            expected:
              name: Test
              description: null
              claims_by_audience: null
              tenant_id: tenant1
              created_by: test@test.com
              changed_by: test@test.com
              tags: null
      save:
        body:
          role_id: entity_id

  - name: Create Role - with empty body
    request:
      url: http://app:5000/roles
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
      json: {}
    response:
      status_code: 422
      body:
        code: 422
        errors:
          name:
            - Missing data for required field.
        status: Unprocessable Entity

  # TODO - update validation
  - name: Update Role
    request:
      url: http://app:5000/roles/{role_id}
      method: PUT
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
      json:
        name: Test
    response:
      status_code: 200
      body:
        $ext:
          function: techlock.common.unittest.tavern_validators:validate_base_model
          extra_kwargs:
            expected:
              entity_id: "{role_id}"
              name: Test
              description: null
              claims_by_audience: null
              tenant_id: tenant1
              created_by: test@test.com
              changed_by: test@test.com
              tags: null
