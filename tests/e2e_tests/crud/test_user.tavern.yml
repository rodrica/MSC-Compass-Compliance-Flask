---
test_name: Users API CRUD Happy
marks:
  - usefixtures:
      - flush_local_dynamodb
stages:
  - name: Get JWT
    request:
      url: http://jwt:5000/login
      method: POST
      headers:
        content-type: application/json
      json:
        sub: auth0|foobar
        user_id: test@test.com
        tenant_id: tenant1
        roles:
          - tenant1
          - tenant1:admin
        claims:
          - allow:tenant1:user-management:*:users:*
    response:
      status_code: 200
      save:
        body:
          access_token: access_token

  - name: Get all Users
    request:
      url: http://app:5000/users
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      body:
        items: []
        num_items: 0
        total_items: 0

  - name: Create User
    request:
      url: http://app:5000/users
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
      json:
        name: Test
        family_name: e2e
        email: test2@test.com
        temporary_password: changeme
    response:
      status_code: 201
      body:
        $ext:
          function: techlock.common.unittest.tavern_validators:validate_base_model
          extra_kwargs:
            expected:
              name: Test
              family_name: e2e
              ftp_username: null
              email: test2@test.com
              departments: []
              offices: []
              roles: []
              description: null
              claims_by_audience: null
              tenant_id: tenant1
              created_by: test@test.com
              changed_by: test@test.com
              tags: null
              login_info: null
      save:
        body:
          created_id: entity_id

  - name: Get User
    request:
      url: http://app:5000/users/{created_id}
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      body:
        $ext:
          function: techlock.common.unittest.tavern_validators:validate_base_model
          extra_kwargs:
            expected:
              entity_id: "{created_id}"
              name: Test
              family_name: e2e
              ftp_username: null
              email: test2@test.com
              departments: []
              offices: []
              roles: []
              description: null
              claims_by_audience: null
              tenant_id: tenant1
              created_by: test@test.com
              changed_by: test@test.com
              tags: null
              login_info: null

  - name: Update User
    request:
      url: http://app:5000/users/{created_id}
      method: PUT
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
      json:
        name: Test
        family_name: e2e_new
        email: test2@test.com
    response:
      status_code: 200
      body:
        $ext:
          function: techlock.common.unittest.tavern_validators:validate_base_model
          extra_kwargs:
            expected:
              entity_id: "{created_id}"
              name: Test
              family_name: e2e_new
              ftp_username: null
              email: test2@test.com
              departments: []
              offices: []
              roles: []
              description: null
              claims_by_audience: null
              tenant_id: tenant1
              created_by: test@test.com
              changed_by: test@test.com
              tags: null
              login_info: null

  - name: Delete User
    request:
      url: http://app:5000/users/{created_id}
      method: DELETE
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
    response:
      status_code: 204

  - name: Get all Users - confirm deletion
    request:
      url: http://app:5000/users
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      body:
        items: []
        num_items: 0
        total_items: 0

  - name: Create User with ftp username
    request:
      url: http://app:5000/users
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
      json:
        name: Test
        family_name: e2e
        ftp_username: test
        email: test2@test.com
        temporary_password: changeme
    response:
      status_code: 201
      body:
        $ext:
          function: techlock.common.unittest.tavern_validators:validate_base_model
          extra_kwargs:
            expected:
              name: Test
              family_name: e2e
              ftp_username: test
              email: test2@test.com
              departments: []
              offices: []
              roles: []
              description: null
              claims_by_audience: null
              tenant_id: tenant1
              created_by: test@test.com
              changed_by: test@test.com
              tags: null
              login_info: null
      save:
        body:
          created_id: entity_id

---
test_name: Users API GET Happy
marks:
  - usefixtures:
      - flush_local_dynamodb
stages:
  - name: Get JWT
    request:
      url: http://jwt:5000/login
      method: POST
      headers:
        content-type: application/json
      json:
        sub: auth0|foobar
        user_id: test@test.com
        tenant_id: tenant1
        roles:
          - tenant1
          - tenant1:admin
        claims:
          - allow:tenant1:user-management:*:users:*
    response:
      status_code: 200
      save:
        body:
          access_token: access_token

  - name: Get JWT2
    request:
      url: http://jwt:5000/login
      method: POST
      headers:
        content-type: application/json
      json:
        sub: auth0|foobar2
        user_id: test2@test.com
        tenant_id: tenant2
        roles:
          - tenant2
          - tenant2:admin
        claims:
          - allow:tenant2:user-management:*:users:*
    response:
      status_code: 200
      save:
        body:
          access_token2: access_token

  - name: Get all Users - tenant1
    request:
      url: http://app:5000/users
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      body:
        items: []
        num_items: 0
        total_items: 0

  - name: Get all Users - tenant2
    request:
      url: http://app:5000/users
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      body:
        items: []
        num_items: 0
        total_items: 0

  - name: Create User1 - tenant1
    request:
      url: http://app:5000/users
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
      json:
        name: Alpha
        family_name: Foo
        email: afoo@test.com
        temporary_password: changeme
    response:
      status_code: 201
      save:
        body:
          user1: entity_id

  - name: Create User2 - tenant1
    request:
      url: http://app:5000/users
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
      json:
        name: Beta
        family_name: Bar
        email: bbar@example.com
        temporary_password: changeme
    response:
      status_code: 201
      save:
        body:
          user2: entity_id

  - name: Create User3 - tenant2
    request:
      url: http://app:5000/users
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token2}"
      json:
        name: Zeta
        family_name: Bar
        email: zbar@example.com
        temporary_password: changeme
    response:
      status_code: 201
      save:
        body:
          user3: entity_id

  - name: Get all Users - tenant1 - no filters
    request:
      url: http://app:5000/users
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      body:
        $ext:
          function: techlock.common.unittest.tavern_validators:validate_base_model
          extra_kwargs:
            expected:
              items:
                - entity_id: "{user1}"
                  name: Alpha
                  family_name: Foo
                  ftp_username: null
                  email: afoo@test.com
                  departments: []
                  offices: []
                  roles: []
                  description: null
                  claims_by_audience: null
                  tenant_id: tenant1
                  created_by: test@test.com
                  changed_by: test@test.com
                  tags: null
                  login_info: null
                - entity_id: "{user2}"
                  name: Beta
                  family_name: Bar
                  ftp_username: null
                  email: bbar@example.com
                  departments: []
                  offices: []
                  roles: []
                  description: null
                  claims_by_audience: null
                  tenant_id: tenant1
                  created_by: test@test.com
                  changed_by: test@test.com
                  tags: null
                  login_info: null
              num_items: 2
              total_items: 2

  - name: Get all Users - tenant2 - no filters
    request:
      url: http://app:5000/users
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token2}"
    response:
      status_code: 200
      body:
        $ext:
          function: techlock.common.unittest.tavern_validators:validate_base_model
          extra_kwargs:
            expected:
              items:
                - entity_id: "{user3}"
                  name: Zeta
                  family_name: Bar
                  ftp_username: null
                  email: zbar@example.com
                  departments: []
                  offices: []
                  roles: []
                  description: null
                  claims_by_audience: null
                  tenant_id: tenant2
                  created_by: test2@test.com
                  changed_by: test2@test.com
                  tags: null
                  login_info: null
              num_items: 1
              total_items: 1

  - name: Get all Users - tenant1 - filter by name case insensitive
    request:
      url: http://app:5000/users
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
      params:
        name: alpha
    response:
      status_code: 200
      body:
        $ext:
          function: techlock.common.unittest.tavern_validators:validate_base_model
          extra_kwargs:
            expected:
              items:
                - entity_id: "{user1}"
                  name: Alpha
                  family_name: Foo
                  ftp_username: null
                  email: afoo@test.com
                  departments: []
                  offices: []
                  roles: []
                  description: null
                  claims_by_audience: null
                  tenant_id: tenant1
                  created_by: test@test.com
                  changed_by: test@test.com
                  tags: null
                  login_info: null
              num_items: 1
              total_items: 1

  - name: Get all Users - tenant1 - filter by family_name endswith wildcard
    request:
      url: http://app:5000/users
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
      params:
        family_name: fo*
    response:
      status_code: 200
      body:
        $ext:
          function: techlock.common.unittest.tavern_validators:validate_base_model
          extra_kwargs:
            expected:
              items:
                - entity_id: "{user1}"
                  name: Alpha
                  family_name: Foo
                  ftp_username: null
                  email: afoo@test.com
                  departments: []
                  offices: []
                  roles: []
                  description: null
                  claims_by_audience: null
                  tenant_id: tenant1
                  created_by: test@test.com
                  changed_by: test@test.com
                  tags: null
                  login_info: null
              num_items: 1
              total_items: 1

  - name: Get all Users - tenant1 - filter by email contains wildcards
    request:
      url: http://app:5000/users
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
      params:
        email: afo*o@t*st.com
    response:
      status_code: 200
      body:
        $ext:
          function: techlock.common.unittest.tavern_validators:validate_base_model
          extra_kwargs:
            expected:
              items:
                - entity_id: "{user1}"
                  name: Alpha
                  family_name: Foo
                  ftp_username: null
                  email: afoo@test.com
                  departments: []
                  offices: []
                  roles: []
                  description: null
                  claims_by_audience: null
                  tenant_id: tenant1
                  created_by: test@test.com
                  changed_by: test@test.com
                  tags: null
                  login_info: null
              num_items: 1
              total_items: 1

  - name: Get all Users - tenant1 - filter by created_by order by name desc
    request:
      url: http://app:5000/users
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
      params:
        created_by: test@test.com
        sort: name:desc
    response:
      status_code: 200
      body:
        $ext:
          function: techlock.common.unittest.tavern_validators:validate_base_model
          extra_kwargs:
            expected:
              items:
                - entity_id: "{user2}"
                  name: Beta
                  family_name: Bar
                  ftp_username: null
                  email: bbar@example.com
                  departments: []
                  offices: []
                  roles: []
                  description: null
                  claims_by_audience: null
                  tenant_id: tenant1
                  created_by: test@test.com
                  changed_by: test@test.com
                  tags: null
                  login_info: null
                - entity_id: "{user1}"
                  name: Alpha
                  family_name: Foo
                  ftp_username: null
                  email: afoo@test.com
                  departments: []
                  offices: []
                  roles: []
                  description: null
                  claims_by_audience: null
                  tenant_id: tenant1
                  created_by: test@test.com
                  changed_by: test@test.com
                  tags: null
                  login_info: null
              num_items: 2
              total_items: 2

  - name: Get User1 - tenant1
    request:
      url: http://app:5000/users/{user1}
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      body:
        $ext:
          function: techlock.common.unittest.tavern_validators:validate_base_model
          extra_kwargs:
            expected:
              entity_id: "{user1}"
              name: Alpha
              family_name: Foo
              ftp_username: null
              email: afoo@test.com
              departments: []
              offices: []
              roles: []
              description: null
              claims_by_audience: null
              tenant_id: tenant1
              created_by: test@test.com
              changed_by: test@test.com
              tags: null
              login_info: null

  - name: Get User3 - tenant1
    request:
      url: http://app:5000/users/{user3}
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
    response:
      status_code: 404

  - name: Get User1 - tenant2
    request:
      url: http://app:5000/users/{user1}
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token2}"
    response:
      status_code: 404

  - name: Get User3 - tenant2
    request:
      url: http://app:5000/users/{user3}
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token2}"
    response:
      status_code: 200
      body:
        $ext:
          function: techlock.common.unittest.tavern_validators:validate_base_model
          extra_kwargs:
            expected:
              entity_id: "{user3}"
              name: Zeta
              family_name: Bar
              ftp_username: null
              email: zbar@example.com
              departments: []
              offices: []
              roles: []
              description: null
              claims_by_audience: null
              tenant_id: tenant2
              created_by: test2@test.com
              changed_by: test2@test.com
              tags: null
              login_info: null

---
test_name: Users API create and update validation
marks:
  - usefixtures:
      - flush_local_dynamodb
stages:
  - name: Get JWT
    request:
      url: http://jwt:5000/login
      method: POST
      headers:
        content-type: application/json
      json:
        sub: auth0|foobar
        user_id: test@test.com
        tenant_id: tenant1
        roles:
          - tenant1
          - tenant1:admin
        claims:
          - allow:tenant1:user-management:*:users:*
    response:
      status_code: 200
      save:
        body:
          access_token: access_token

  - name: Get JWT2
    request:
      url: http://jwt:5000/login
      method: POST
      headers:
        content-type: application/json
      json:
        sub: auth0|foobar2
        user_id: test2@test.com
        tenant_id: tenant2
        roles:
          - tenant2
          - tenant2:admin
        claims:
          - allow:tenant2:user-management:*:users:*
    response:
      status_code: 200
      save:
        body:
          access_token2: access_token

  - name: Get all Users
    request:
      url: http://app:5000/users
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      body:
        items: []
        num_items: 0
        total_items: 0

  - name: Create User
    request:
      url: http://app:5000/users
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
      json:
        name: Test
        family_name: e2e
        ftp_username: test
        email: test2@test.com
        temporary_password: changeme
    response:
      status_code: 201
      body:
        $ext:
          function: techlock.common.unittest.tavern_validators:validate_base_model
          extra_kwargs:
            expected:
              name: Test
              family_name: e2e
              ftp_username: test
              email: test2@test.com
              departments: []
              offices: []
              roles: []
              description: null
              claims_by_audience: null
              tenant_id: tenant1
              created_by: test@test.com
              changed_by: test@test.com
              tags: null
              login_info: null
      save:
        body:
          user_id: entity_id

  - name: Create User 2
    request:
      url: http://app:5000/users
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
      json:
        name: Test2
        family_name: e2e
        ftp_username: test2
        email: test3@test.com
        temporary_password: changeme
    response:
      status_code: 201
      body:
        $ext:
          function: techlock.common.unittest.tavern_validators:validate_base_model
          extra_kwargs:
            expected:
              name: Test2
              family_name: e2e
              ftp_username: test2
              email: test3@test.com
              departments: []
              offices: []
              roles: []
              description: null
              claims_by_audience: null
              tenant_id: tenant1
              created_by: test@test.com
              changed_by: test@test.com
              tags: null
              login_info: null

  - name: Create User in different tenant
    request:
      url: http://app:5000/users
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token2}"
        TL-Tenant-ID: tenant1
      json:
        name: Test5
        family_name: e2e
        ftp_username: test5
        email: test5@test.com
        temporary_password: changeme
    response:
      status_code: 403
      body:
        error: true
        msg: Not authorized.

  - name: Create User - with empty body
    request:
      url: http://app:5000/users
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
      json: {}
    response:
      status_code: 422
      body:
        code: 422
        errors:
          json:
            email:
              - Missing data for required field.
            name:
              - Missing data for required field.
            temporary_password:
            - Missing data for required field.
        status: Unprocessable Entity

  - name: Create User - without password
    request:
      url: http://app:5000/users
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
      json:
        name: Test
        family_name: e2e
        email: test2@test.com
    response:
      status_code: 422
      body:
        code: 422
        errors:
          json:
            temporary_password:
              - Missing data for required field.
        status: Unprocessable Entity

  - name: Create User - with invalid email and numeric name
    request:
      url: http://app:5000/users
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
      json:
        name: 123
        family_name: e2e
        email: testest.com
        temporary_password: changeme
    response:
      status_code: 422
      body:
        code: 422
        errors:
          json:
            email:
              - Not a valid email address.
            name:
            - Not a valid string.
        status: Unprocessable Entity

  - name: Create User - with non-uuid deparment, office, and role
    request:
      url: http://app:5000/users
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
      json:
        name: Test
        family_name: e2e
        email: test2@test.com
        temporary_password: changeme
        department_ids: ['not_a_uuid']
        office_ids: ['not_a_uuid']
        role_ids: ['not_a_uuid']
    response:
      status_code: 422
      body:
        code: 422
        errors:
          json:
            department_ids: {"0": ["Not a valid UUID."]}
            office_ids: {"0": ["Not a valid UUID."]}
            role_ids: {"0": ["Not a valid UUID."]}
        status: Unprocessable Entity

  - name: Create User - with invalid claim
    request:
      url: http://app:5000/users
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
      json:
        name: Test
        family_name: e2e
        email: test2@test.com
        temporary_password: changeme
        claims_by_audience: {"a": ["a"]}
    response:
      status_code: 422
      body:
        code: 422
        errors:
          json:
            claims_by_audience: {"a": {"value": {"0": ["Claim has too few parts, expected 6 or 7, found 2."]}}}
        status: Unprocessable Entity

  - name: Create User - with duplicate ftp_username
    request:
      url: http://app:5000/users
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
      json:
        name: Test2
        family_name: e2e
        ftp_username: test
        email: test4@test.com
        temporary_password: changeme
    response:
      status_code: 409
      body:
        error: True
        msg: ftp_username 'test' already exists.

  # TODO - update validation
  - name: Update User
    request:
      url: http://app:5000/users/{created_id}
      method: PUT
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
      json:
        name: Test
        family_name: e2e_new
        email: test2@test.com
    response:
      status_code: 200
      body:
        $ext:
          function: techlock.common.unittest.tavern_validators:validate_base_model
          extra_kwargs:
            expected:
              entity_id: "{user_id}"
              name: Test
              family_name: e2e_new
              ftp_username: test
              email: test2@test.com
              departments: []
              offices: []
              roles: []
              description: null
              claims_by_audience: null
              tenant_id: tenant1
              created_by: test@test.com
              changed_by: test@test.com
              tags: null
              login_info: null

  - name: Update User - with existing ftp username
    request:
      url: http://app:5000/users/{created_id}
      method: PUT
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token}"
      json:
        name: Test
        family_name: e2e_new
        ftp_username: test2
        email: test2@test.com
    response:
      status_code: 409
      body:
        error: True
        msg: ftp_username 'test2' already exists.
